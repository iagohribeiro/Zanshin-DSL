/**
 * generated by Xtext 2.10.0
 */
package zanshin.dsl.generator;

import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.TreeIterator;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import zanshin.dsl.dsl.Project;
import zanshin.dsl.dsl.Scope;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class DslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    TreeIterator<EObject> _allContents = resource.getAllContents();
    Iterable<EObject> _iterable = IteratorExtensions.<EObject>toIterable(_allContents);
    Iterable<Scope> _filter = Iterables.<Scope>filter(_iterable, Scope.class);
    for (final Scope e : _filter) {
      {
        Project _project = e.getProject();
        String _importedNamespace = _project.getImportedNamespace();
        String _replace = _importedNamespace.replace(" ", "");
        final String projectName = _replace.replace("\"", "");
        CharSequence _simulation = this.simulation(e);
        fsa.generateFile(
          (((("/" + projectName) + "/") + projectName) + ".java"), _simulation);
        CharSequence _TargetSystem = this.TargetSystem(e);
        fsa.generateFile(
          ((("/" + projectName) + "/SimulatedTargetSystem") + ".java"), _TargetSystem);
        CharSequence _AbstractSimulation = this.AbstractSimulation(e);
        fsa.generateFile(
          ((((("/" + projectName) + "/Abstract") + projectName) + "Simulation") + ".java"), _AbstractSimulation);
      }
    }
  }
  
  public CharSequence simulation(final Scope scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package it.unitn.disi.zanshin.simulation.cases.project.");
    Project _project = scope.getProject();
    String _importedNamespace = _project.getImportedNamespace();
    String _replace = _importedNamespace.replace(" ", "");
    String _replace_1 = _replace.replace("\"", "");
    _builder.append(_replace_1, "");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("import it.unitn.disi.zanshin.simulation.Logger;");
    _builder.newLine();
    _builder.append("import it.unitn.disi.zanshin.simulation.cases.SimulationPart;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    String _name = scope.getName();
    String _replace_2 = _name.replace(" ", "");
    String _replace_3 = _replace_2.replace("\"", "");
    _builder.append(_replace_3, "");
    _builder.append(" extends AbstractAtmSimulation {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private static final Logger log = new Logger(AtmAR2FailureSimulation.class);");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/** @see it.unitn.disi.zanshin.simulation.cases.AbstractSimulation#doInit() */");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("@Override");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("protected void doInit() throws Exception {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("// Registers the ");
    Project _project_1 = scope.getProject();
    String _importedNamespace_1 = _project_1.getImportedNamespace();
    String _replace_4 = _importedNamespace_1.replace(" ", "");
    String _replace_5 = _replace_4.replace("\"", "");
    _builder.append(_replace_5, "\t\t");
    _builder.append(" Simulation as target system in Zanshin.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("registerTargetSystem();");
    _builder.newLine();
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence TargetSystem(final Scope scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append(" ");
    _builder.append("Test TargetSystem");
    _builder.newLine();
    _builder.append("\t\t");
    String _name = scope.getName();
    String _replace = _name.replace(" ", "");
    String _replace_1 = _replace.replace("\"", "");
    _builder.append(_replace_1, "\t\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence AbstractSimulation(final Scope scope) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Test AbstractSimulation");
    _builder.newLine();
    _builder.append("\t\t");
    String _name = scope.getName();
    String _replace = _name.replace(" ", "");
    String _replace_1 = _replace.replace("\"", "");
    _builder.append(_replace_1, "\t\t");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
}

/*
 * generated by Xtext 2.10.0
 */
package zanshin.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import zanshin.dsl.dsl.Scope

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DslGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(e:resource.allContents.toIterable.filter(Scope)){
			val String projectName = e.project.importedNamespace.replace(" ", "").replace("\"","");
			
			fsa.generateFile(
		   		"/" + projectName + "/" + projectName + ".java", e.simulation
		   	);
			fsa.generateFile(
		   		 "/" + projectName + "/SimulatedTargetSystem" + ".java", e.TargetSystem
			);
			
			fsa.generateFile(
		   		 "/" + projectName + "/Abstract" + projectName + "Simulation" + ".java", e.AbstractSimulation
			);
		}
	}
	
	def CharSequence simulation(Scope scope){
		val String projectName = scope.project.importedNamespace.replace(" ", "").replace("\"","");
		val String simulationName = scope.name;
		
		'''
		package it.unitn.disi.zanshin.simulation.cases.«projectName»;
		
		import it.unitn.disi.zanshin.simulation.Logger;
		import it.unitn.disi.zanshin.simulation.cases.SimulationPart;
		
		public final class «simulationName» extends Abstract«projectName.toFirstUpper»Simulation {
			
			private static final Logger log = new Logger(«simulationName».class);
			
			/** @see it.unitn.disi.zanshin.simulation.cases.AbstractSimulation#doInit() */
			@Override
			public void doInit() throws Exception {
				// Registers the «projectName» Simulation as target system in Zanshin.
				registerTargetSystem();
				«FOR i:0 ..< scope.commands.size»
				«val commands = scope.commands.get(i)»
				«val index = i+1»
				«val String simulationType = commands.type.simulationType»
				«val String requeriment = commands.type.name»
				
				// Adds the part «index» of the simulation to the list.
				parts.add(new SimulationPart() {
					@Override
					public void run() throws Exception {
						// Creates a user session, as if someone were using the «projectName».
						sessionId = zanshin.createUserSession(targetSystemId);
						log.info("Created a new user session with id: {0}", sessionId); //$NON-NLS-1$
						
						«IF index == 1»
						log.info("Current incident took more than 3 minutes do dispatch!"); //$NON-NLS-1$
						«ELSE»
						log.info("Current incident took more than 3 minutes do dispatch!"); //$NON-NLS-1$
						«ENDIF»
						zanshin.logRequirementStart(targetSystemId, sessionId, «requeriment»);
						«IF commands.type.array»
						«FOR j:0 ..< commands.type.length»
						zanshin.logRequirement«simulationType»(targetSystemId, sessionId, «requeriment»);
						«ENDFOR»
						«ELSE»
						zanshin.logRequirement«simulationType»(targetSystemId, sessionId, «requeriment»);
						«ENDIF»
						// Ends the user session.
						zanshin.disposeUserSession(targetSystemId, sessionId);
					}
					@Override
					public boolean shouldWait() {
						«IF index == scope.length»
						return false;
						«ELSE»
						return true;
						«ENDIF»
					}
				});
				«ENDFOR»
			}
		}
		'''
	}
	def CharSequence TargetSystem(Scope scope){
		''' Test TargetSystem
		«scope.name.replace(" ", "").replace("\"","")»
		'''
	}
	def CharSequence AbstractSimulation(Scope scope){
		'''Test AbstractSimulation
		«scope.name.replace(" ", "").replace("\"","")»
		'''
	}
}

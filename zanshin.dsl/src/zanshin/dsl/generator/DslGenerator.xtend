/*
 * generated by Xtext 2.10.0
 */
package zanshin.dsl.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.AbstractGenerator
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.generator.IGeneratorContext
import zanshin.dsl.dsl.Scope

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
class DslGenerator extends AbstractGenerator {
	
	override void doGenerate(Resource resource, IFileSystemAccess2 fsa, IGeneratorContext context) {
		for(e:resource.allContents.toIterable.filter(Scope)){
			val String projectName = e.project.importedNamespace.replace(" ", "").replace("\"","");
			
			fsa.generateFile(
		   		"/" + projectName + "/" + projectName + ".java", e.simulation
		   	);
			fsa.generateFile(
		   		 "/" + projectName + "/SimulatedTargetSystem" + ".java", e.TargetSystem
			);
			
			fsa.generateFile(
		   		 "/" + projectName + "/Abstract" + projectName + "Simulation" + ".java", e.AbstractSimulation
			);
		}
	}
	
	def CharSequence simulation(Scope scope){
		'''
		package it.unitn.disi.zanshin.simulation.cases.project.«scope.project.importedNamespace.replace(" ", "").replace("\"","")»;
		
		import it.unitn.disi.zanshin.simulation.Logger;
		import it.unitn.disi.zanshin.simulation.cases.SimulationPart;
		
		public class «scope.name.replace(" ", "").replace("\"","")» extends AbstractAtmSimulation {
			
			private static final Logger log = new Logger(AtmAR2FailureSimulation.class);
			
			/** @see it.unitn.disi.zanshin.simulation.cases.AbstractSimulation#doInit() */
			@Override
			protected void doInit() throws Exception {
				// Registers the «scope.project.importedNamespace.replace(" ", "").replace("\"","")» Simulation as target system in Zanshin.
				registerTargetSystem();
		
			}
		}
		'''
	}
	def CharSequence TargetSystem(Scope scope){
		''' Test TargetSystem
		«scope.name.replace(" ", "").replace("\"","")»
		'''
	}
	def CharSequence AbstractSimulation(Scope scope){
		'''Test AbstractSimulation
		«scope.name.replace(" ", "").replace("\"","")»
		'''
	}
}

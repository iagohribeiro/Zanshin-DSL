/*
 * generated by Xtext 2.10.0
 */
package zanshin.dsl.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import zanshin.dsl.dsl.DslPackage;
import zanshin.dsl.dsl.Failure;
import zanshin.dsl.dsl.Log;
import zanshin.dsl.dsl.Model;
import zanshin.dsl.dsl.Project;
import zanshin.dsl.dsl.Scope;
import zanshin.dsl.dsl.Success;
import zanshin.dsl.dsl.commandBlock;
import zanshin.dsl.services.DslGrammarAccess;

@SuppressWarnings("all")
public class DslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private DslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == DslPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case DslPackage.FAILURE:
				sequence_Failure(context, (Failure) semanticObject); 
				return; 
			case DslPackage.LOG:
				sequence_Log(context, (Log) semanticObject); 
				return; 
			case DslPackage.MODEL:
				sequence_Model(context, (Model) semanticObject); 
				return; 
			case DslPackage.PROJECT:
				sequence_Project(context, (Project) semanticObject); 
				return; 
			case DslPackage.SCOPE:
				sequence_Scope(context, (Scope) semanticObject); 
				return; 
			case DslPackage.SUCCESS:
				sequence_Success(context, (Success) semanticObject); 
				return; 
			case DslPackage.COMMAND_BLOCK:
				sequence_commandBlock(context, (commandBlock) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     TestType returns Failure
	 *     Failure returns Failure
	 *
	 * Constraint:
	 *     (simulationType='Failure' (array?='[' length=INT?)? name=STRING)
	 */
	protected void sequence_Failure(ISerializationContext context, Failure semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Log returns Log
	 *
	 * Constraint:
	 *     message=STRING
	 */
	protected void sequence_Log(ISerializationContext context, Log semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.LOG__MESSAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.LOG__MESSAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLogAccess().getMessageSTRINGTerminalRuleCall_1_0(), semanticObject.getMessage());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Model returns Model
	 *
	 * Constraint:
	 *     dsl+=Scope+
	 */
	protected void sequence_Model(ISerializationContext context, Model semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Project returns Project
	 *
	 * Constraint:
	 *     importedNamespace=QualifiedNameWithWildcard
	 */
	protected void sequence_Project(ISerializationContext context, Project semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, DslPackage.Literals.PROJECT__IMPORTED_NAMESPACE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, DslPackage.Literals.PROJECT__IMPORTED_NAMESPACE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getProjectAccess().getImportedNamespaceQualifiedNameWithWildcardParserRuleCall_1_0(), semanticObject.getImportedNamespace());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Scope returns Scope
	 *
	 * Constraint:
	 *     (project=Project (commands+=commandBlock (simulation+='Simulation' name+=ID length+=INT?)?)*)
	 */
	protected void sequence_Scope(ISerializationContext context, Scope semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     TestType returns Success
	 *     Success returns Success
	 *
	 * Constraint:
	 *     (simulationType='Success' (array?='[' length=INT?)? name=STRING)
	 */
	protected void sequence_Success(ISerializationContext context, Success semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     commandBlock returns commandBlock
	 *
	 * Constraint:
	 *     (testtype+=TestType* message+=Log+)
	 */
	protected void sequence_commandBlock(ISerializationContext context, commandBlock semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}

/**
 * generated by Xtext 2.10.0
 */
package zanshin.dsl.dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import zanshin.dsl.dsl.Commands;
import zanshin.dsl.dsl.DslPackage;
import zanshin.dsl.dsl.Log;
import zanshin.dsl.dsl.TestQuantity;
import zanshin.dsl.dsl.TestType;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Commands</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link zanshin.dsl.dsl.impl.CommandsImpl#getTestquantity <em>Testquantity</em>}</li>
 *   <li>{@link zanshin.dsl.dsl.impl.CommandsImpl#getTesttype <em>Testtype</em>}</li>
 *   <li>{@link zanshin.dsl.dsl.impl.CommandsImpl#getMessage <em>Message</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CommandsImpl extends MinimalEObjectImpl.Container implements Commands
{
  /**
   * The cached value of the '{@link #getTestquantity() <em>Testquantity</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestquantity()
   * @generated
   * @ordered
   */
  protected EList<TestQuantity> testquantity;

  /**
   * The cached value of the '{@link #getTesttype() <em>Testtype</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTesttype()
   * @generated
   * @ordered
   */
  protected EList<TestType> testtype;

  /**
   * The cached value of the '{@link #getMessage() <em>Message</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessage()
   * @generated
   * @ordered
   */
  protected Log message;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CommandsImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.COMMANDS;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TestQuantity> getTestquantity()
  {
    if (testquantity == null)
    {
      testquantity = new EObjectContainmentEList<TestQuantity>(TestQuantity.class, this, DslPackage.COMMANDS__TESTQUANTITY);
    }
    return testquantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TestType> getTesttype()
  {
    if (testtype == null)
    {
      testtype = new EObjectContainmentEList<TestType>(TestType.class, this, DslPackage.COMMANDS__TESTTYPE);
    }
    return testtype;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Log getMessage()
  {
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetMessage(Log newMessage, NotificationChain msgs)
  {
    Log oldMessage = message;
    message = newMessage;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.COMMANDS__MESSAGE, oldMessage, newMessage);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setMessage(Log newMessage)
  {
    if (newMessage != message)
    {
      NotificationChain msgs = null;
      if (message != null)
        msgs = ((InternalEObject)message).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.COMMANDS__MESSAGE, null, msgs);
      if (newMessage != null)
        msgs = ((InternalEObject)newMessage).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.COMMANDS__MESSAGE, null, msgs);
      msgs = basicSetMessage(newMessage, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.COMMANDS__MESSAGE, newMessage, newMessage));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.COMMANDS__TESTQUANTITY:
        return ((InternalEList<?>)getTestquantity()).basicRemove(otherEnd, msgs);
      case DslPackage.COMMANDS__TESTTYPE:
        return ((InternalEList<?>)getTesttype()).basicRemove(otherEnd, msgs);
      case DslPackage.COMMANDS__MESSAGE:
        return basicSetMessage(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.COMMANDS__TESTQUANTITY:
        return getTestquantity();
      case DslPackage.COMMANDS__TESTTYPE:
        return getTesttype();
      case DslPackage.COMMANDS__MESSAGE:
        return getMessage();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.COMMANDS__TESTQUANTITY:
        getTestquantity().clear();
        getTestquantity().addAll((Collection<? extends TestQuantity>)newValue);
        return;
      case DslPackage.COMMANDS__TESTTYPE:
        getTesttype().clear();
        getTesttype().addAll((Collection<? extends TestType>)newValue);
        return;
      case DslPackage.COMMANDS__MESSAGE:
        setMessage((Log)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.COMMANDS__TESTQUANTITY:
        getTestquantity().clear();
        return;
      case DslPackage.COMMANDS__TESTTYPE:
        getTesttype().clear();
        return;
      case DslPackage.COMMANDS__MESSAGE:
        setMessage((Log)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.COMMANDS__TESTQUANTITY:
        return testquantity != null && !testquantity.isEmpty();
      case DslPackage.COMMANDS__TESTTYPE:
        return testtype != null && !testtype.isEmpty();
      case DslPackage.COMMANDS__MESSAGE:
        return message != null;
    }
    return super.eIsSet(featureID);
  }

} //CommandsImpl

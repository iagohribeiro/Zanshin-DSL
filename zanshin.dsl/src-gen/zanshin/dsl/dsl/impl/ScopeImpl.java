/**
 * generated by Xtext 2.10.0
 */
package zanshin.dsl.dsl.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import zanshin.dsl.dsl.Commands;
import zanshin.dsl.dsl.DslPackage;
import zanshin.dsl.dsl.Log;
import zanshin.dsl.dsl.Project;
import zanshin.dsl.dsl.Scope;
import zanshin.dsl.dsl.TestQuantity;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Scope</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link zanshin.dsl.dsl.impl.ScopeImpl#getProject <em>Project</em>}</li>
 *   <li>{@link zanshin.dsl.dsl.impl.ScopeImpl#getName <em>Name</em>}</li>
 *   <li>{@link zanshin.dsl.dsl.impl.ScopeImpl#getLength <em>Length</em>}</li>
 *   <li>{@link zanshin.dsl.dsl.impl.ScopeImpl#getTestquantity <em>Testquantity</em>}</li>
 *   <li>{@link zanshin.dsl.dsl.impl.ScopeImpl#getCommands <em>Commands</em>}</li>
 *   <li>{@link zanshin.dsl.dsl.impl.ScopeImpl#getMessage <em>Message</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ScopeImpl extends MinimalEObjectImpl.Container implements Scope
{
  /**
   * The cached value of the '{@link #getProject() <em>Project</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProject()
   * @generated
   * @ordered
   */
  protected Project project;

  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The default value of the '{@link #getLength() <em>Length</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLength()
   * @generated
   * @ordered
   */
  protected static final int LENGTH_EDEFAULT = 0;

  /**
   * The cached value of the '{@link #getLength() <em>Length</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getLength()
   * @generated
   * @ordered
   */
  protected int length = LENGTH_EDEFAULT;

  /**
   * The cached value of the '{@link #getTestquantity() <em>Testquantity</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTestquantity()
   * @generated
   * @ordered
   */
  protected EList<TestQuantity> testquantity;

  /**
   * The cached value of the '{@link #getCommands() <em>Commands</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCommands()
   * @generated
   * @ordered
   */
  protected EList<Commands> commands;

  /**
   * The cached value of the '{@link #getMessage() <em>Message</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getMessage()
   * @generated
   * @ordered
   */
  protected EList<Log> message;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ScopeImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return DslPackage.Literals.SCOPE;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Project getProject()
  {
    return project;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetProject(Project newProject, NotificationChain msgs)
  {
    Project oldProject = project;
    project = newProject;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, DslPackage.SCOPE__PROJECT, oldProject, newProject);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProject(Project newProject)
  {
    if (newProject != project)
    {
      NotificationChain msgs = null;
      if (project != null)
        msgs = ((InternalEObject)project).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - DslPackage.SCOPE__PROJECT, null, msgs);
      if (newProject != null)
        msgs = ((InternalEObject)newProject).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - DslPackage.SCOPE__PROJECT, null, msgs);
      msgs = basicSetProject(newProject, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SCOPE__PROJECT, newProject, newProject));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SCOPE__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public int getLength()
  {
    return length;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setLength(int newLength)
  {
    int oldLength = length;
    length = newLength;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, DslPackage.SCOPE__LENGTH, oldLength, length));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<TestQuantity> getTestquantity()
  {
    if (testquantity == null)
    {
      testquantity = new EObjectContainmentEList<TestQuantity>(TestQuantity.class, this, DslPackage.SCOPE__TESTQUANTITY);
    }
    return testquantity;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Commands> getCommands()
  {
    if (commands == null)
    {
      commands = new EObjectContainmentEList<Commands>(Commands.class, this, DslPackage.SCOPE__COMMANDS);
    }
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<Log> getMessage()
  {
    if (message == null)
    {
      message = new EObjectContainmentEList<Log>(Log.class, this, DslPackage.SCOPE__MESSAGE);
    }
    return message;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case DslPackage.SCOPE__PROJECT:
        return basicSetProject(null, msgs);
      case DslPackage.SCOPE__TESTQUANTITY:
        return ((InternalEList<?>)getTestquantity()).basicRemove(otherEnd, msgs);
      case DslPackage.SCOPE__COMMANDS:
        return ((InternalEList<?>)getCommands()).basicRemove(otherEnd, msgs);
      case DslPackage.SCOPE__MESSAGE:
        return ((InternalEList<?>)getMessage()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case DslPackage.SCOPE__PROJECT:
        return getProject();
      case DslPackage.SCOPE__NAME:
        return getName();
      case DslPackage.SCOPE__LENGTH:
        return getLength();
      case DslPackage.SCOPE__TESTQUANTITY:
        return getTestquantity();
      case DslPackage.SCOPE__COMMANDS:
        return getCommands();
      case DslPackage.SCOPE__MESSAGE:
        return getMessage();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case DslPackage.SCOPE__PROJECT:
        setProject((Project)newValue);
        return;
      case DslPackage.SCOPE__NAME:
        setName((String)newValue);
        return;
      case DslPackage.SCOPE__LENGTH:
        setLength((Integer)newValue);
        return;
      case DslPackage.SCOPE__TESTQUANTITY:
        getTestquantity().clear();
        getTestquantity().addAll((Collection<? extends TestQuantity>)newValue);
        return;
      case DslPackage.SCOPE__COMMANDS:
        getCommands().clear();
        getCommands().addAll((Collection<? extends Commands>)newValue);
        return;
      case DslPackage.SCOPE__MESSAGE:
        getMessage().clear();
        getMessage().addAll((Collection<? extends Log>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.SCOPE__PROJECT:
        setProject((Project)null);
        return;
      case DslPackage.SCOPE__NAME:
        setName(NAME_EDEFAULT);
        return;
      case DslPackage.SCOPE__LENGTH:
        setLength(LENGTH_EDEFAULT);
        return;
      case DslPackage.SCOPE__TESTQUANTITY:
        getTestquantity().clear();
        return;
      case DslPackage.SCOPE__COMMANDS:
        getCommands().clear();
        return;
      case DslPackage.SCOPE__MESSAGE:
        getMessage().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case DslPackage.SCOPE__PROJECT:
        return project != null;
      case DslPackage.SCOPE__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case DslPackage.SCOPE__LENGTH:
        return length != LENGTH_EDEFAULT;
      case DslPackage.SCOPE__TESTQUANTITY:
        return testquantity != null && !testquantity.isEmpty();
      case DslPackage.SCOPE__COMMANDS:
        return commands != null && !commands.isEmpty();
      case DslPackage.SCOPE__MESSAGE:
        return message != null && !message.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(", length: ");
    result.append(length);
    result.append(')');
    return result.toString();
  }

} //ScopeImpl
